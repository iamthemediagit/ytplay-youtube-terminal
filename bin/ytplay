#!/bin/bash
# ytplay - Recherche YouTube interactive avec s√©lection fzf + lecture mpv
# Version: 2.1
# Usage: ytplay "search query" [max_results]

set -e

QUERY="${1:-documentaire in√©dit}"
MAX_RESULTS="${2:-20}"

# V√©rifier les d√©pendances
for cmd in yt-dlp fzf jq mpv; do
    if ! command -v $cmd &> /dev/null; then
        echo "‚ùå Erreur: $cmd n'est pas install√©"
        exit 1
    fi
done

# Logo ASCII
cat << 'EOF'
 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 ‚îÇ  ‚ñÄ‚ñÑ    ‚ñÑ  ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ  ‚ñà‚ñÄ‚ñÄ‚ñÑ  ‚ñà     ‚ñà‚ñÄ‚ñÄ‚ñà  ‚ñÄ‚ñÑ    ‚ñÑ ‚îÇ
 ‚îÇ   ‚ñà  ‚ñà     ‚ñà    ‚ñà‚ñÑ‚ñÑ‚ñà  ‚ñà     ‚ñà‚ñÑ‚ñÑ‚ñà   ‚ñà  ‚ñà  ‚îÇ
 ‚îÇ    ‚ñÄ‚ñÄ      ‚ñÄ    ‚ñÄ     ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ  ‚ñÄ    ‚ñÄ‚ñÄ   ‚îÇ
 ‚îÇ  YouTube Terminal Player v2.1           ‚îÇ
 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
EOF
echo ""
echo "üîç Recherche: \"$QUERY\" ($MAX_RESULTS r√©sultats)..."
echo ""

# Extraire les r√©sultats YouTube en JSON (mode rapide)
RESULTS=$(yt-dlp --dump-json --flat-playlist --skip-download "ytsearch${MAX_RESULTS}:${QUERY}" 2>/dev/null)

if [ -z "$RESULTS" ]; then
    echo "‚ùå Aucun r√©sultat trouv√©"
    exit 1
fi

# Formater pour fzf: "Titre | Dur√©e | Vues | Auteur | ID"
FORMATTED=$(echo "$RESULTS" | jq -r '
    .title[0:60] + "|" + 
    (if .duration then (.duration | tostring) else "0" end) + "|" + 
    (if .view_count then (.view_count | tostring) else "0" end) + "|" + 
    (.uploader // "Unknown")[0:25] + "|" + 
    .id
' | while IFS='|' read -r title duration views uploader id; do
    # Formater la dur√©e
    duration=$(echo "$duration" | tr -d ' ')
    if [ "$duration" = "0" ] || [ -z "$duration" ]; then
        dur_formatted="N/A"
    else
        hours=$((duration / 3600))
        minutes=$(((duration % 3600) / 60))
        if [ $hours -gt 0 ]; then
            dur_formatted="${hours}h$(printf '%02d' $minutes)m"
        else
            dur_formatted="${minutes}min"
        fi
    fi
    
    # Formater les vues
    views_num=$(echo "$views" | tr -d ' ')
    if [ "$views_num" -gt 1000000 ] 2>/dev/null; then
        views_formatted="$(awk "BEGIN {printf \"%.1f\", $views_num/1000000}")M"
    elif [ "$views_num" -gt 1000 ] 2>/dev/null; then
        views_formatted="$((views_num / 1000))K"
    else
        views_formatted="$views_num"
    fi
    
    # Nettoyer l'ID et cr√©er le lien complet
    id_clean=$(echo "$id" | tr -d ' ')
    video_link="https://youtu.be/$id_clean"
    
    # Format: Titre | Dur√©e | Vues | Auteur | Lien
    printf "%-60s | %7s | %6s | %-25s | %s\n" \
        "$(echo "$title" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$dur_formatted" \
        "$views_formatted" \
        "$(echo "$uploader" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$video_link"
done)

# Header pour fzf
HEADER="Titre                                                        | Dur√©e   | Vues   | Auteur                    | Lien (Cmd+Click)"

# S√©lection interactive avec fzf (multi-s√©lection avec Tab)
SELECTED=$(echo "$FORMATTED" | fzf \
    --multi \
    --prompt="üéµ S√©lection ‚ñ∂ " \
    --height=100% \
    --layout=reverse \
    --info=inline \
    --border=rounded \
    --header="$HEADER" \
    --header-lines=0 \
    --preview-window=up:3:wrap \
    --preview='echo "üì∫ S√©lectionn√©: {1}"' \
    --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
    --color='header:italic:underline')

if [ -z "$SELECTED" ]; then
    echo "‚ùå Aucune s√©lection"
    exit 0
fi

# Compter le nombre de s√©lections
NUM_SELECTED=$(echo "$SELECTED" | wc -l | tr -d ' ')

# Extraire les URLs
VIDEO_URLS=()
while IFS= read -r line; do
    # Extraire l'ID depuis le lien (format: üîó VIDEO_ID)
    VIDEO_ID=$(echo "$line" | awk -F'|' '{print $NF}' | grep -oE '[a-zA-Z0-9_-]{11}' | head -1)
    if [ -n "$VIDEO_ID" ]; then
        VIDEO_URLS+=("https://www.youtube.com/watch?v=${VIDEO_ID}")
    fi
done <<< "$SELECTED"

echo ""
if [ "$NUM_SELECTED" -eq 1 ]; then
    VIDEO_TITLE=$(echo "$SELECTED" | awk -F' \\| ' '{print $1}')
    echo "‚ñ∂Ô∏è  Lecture: $VIDEO_TITLE"
else
    echo "‚ñ∂Ô∏è  Lecture de $NUM_SELECTED vid√©os (playlist)"
    echo "   Utilisez < et > dans mpv pour naviguer"
fi
echo ""

# Demander audio ou vid√©o
echo "Mode de lecture:"
echo "  [1] Audio seul (d√©faut)"
echo "  [2] Vid√©o"
echo -n "Choix (1/2): "
read -t 5 MODE || MODE="1"
echo ""

# Afficher les raccourcis clavier
echo "‚å®Ô∏è  Raccourcis mpv:"
echo "   <  >     : Vid√©o pr√©c√©dente/suivante"
echo "   ‚Üê  ‚Üí     : Reculer/Avancer 5s"
echo "   ‚Üë  ‚Üì     : Volume +/-"
echo "   Space    : Pause/Play"
echo "   q        : Quitter"
echo ""

case $MODE in
    2)
        echo "üìπ Lecture vid√©o..."
        echo ""
        # Options mpv avec compteur playlist
        mpv --term-status-msg='Playlist: [${playlist-pos-1}/${playlist-count}] ‚è± ${time-pos}/${duration} | ${media-title}' \
            --term-playing-msg='‚ñ∂Ô∏è  Lecture [${playlist-pos-1}/${playlist-count}]: ${media-title}' \
            "${VIDEO_URLS[@]}"
        ;;
    *)
        echo "üéß Lecture audio..."
        echo ""
        # Options mpv audio avec compteur playlist
        mpv --no-video \
            --term-status-msg='‚ô™ Playlist: [${playlist-pos-1}/${playlist-count}] | ‚è± ${time-pos}/${duration} | ${media-title}' \
            --term-playing-msg='‚ñ∂Ô∏è  Audio [${playlist-pos-1}/${playlist-count}]: ${media-title}' \
            "${VIDEO_URLS[@]}"
        ;;
esac
