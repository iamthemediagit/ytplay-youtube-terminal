#!/bin/bash
# ytplay - Interactive YouTube search with fzf selection + mpv playback
# Version: 2.1
# Usage: ytplay "search query" [max_results]

set -e

QUERY="${1:-documentary}"
MAX_RESULTS="${2:-20}"

# Check dependencies
for cmd in yt-dlp fzf jq mpv; do
    if ! command -v $cmd &> /dev/null; then
        echo "‚ùå Error: $cmd is not installed"
        exit 1
    fi
done

# ASCII Logo
cat << 'EOF'
 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 ‚îÇ  ‚ñÄ‚ñÑ    ‚ñÑ  ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ  ‚ñà‚ñÄ‚ñÄ‚ñÑ  ‚ñà     ‚ñà‚ñÄ‚ñÄ‚ñà  ‚ñÄ‚ñÑ    ‚ñÑ ‚îÇ
 ‚îÇ   ‚ñà  ‚ñà     ‚ñà    ‚ñà‚ñÑ‚ñÑ‚ñà  ‚ñà     ‚ñà‚ñÑ‚ñÑ‚ñà   ‚ñà  ‚ñà  ‚îÇ
 ‚îÇ    ‚ñÄ‚ñÄ      ‚ñÄ    ‚ñÄ     ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ  ‚ñÄ    ‚ñÄ‚ñÄ   ‚îÇ
 ‚îÇ  YouTube Terminal Player v2.1           ‚îÇ
 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
EOF
echo ""
echo "üîç Search: \"$QUERY\" ($MAX_RESULTS results)..."
echo ""

# Extract YouTube results as JSON (fast mode)
RESULTS=$(yt-dlp --dump-json --flat-playlist --skip-download "ytsearch${MAX_RESULTS}:${QUERY}" 2>/dev/null)

if [ -z "$RESULTS" ]; then
    echo "‚ùå No results found"
    exit 1
fi

# Format for fzf: "Title | Duration | Views | Author | ID"
FORMATTED=$(echo "$RESULTS" | jq -r '
    .title[0:60] + "|" + 
    (if .duration then (.duration | tostring) else "0" end) + "|" + 
    (if .view_count then (.view_count | tostring) else "0" end) + "|" + 
    (.uploader // "Unknown")[0:25] + "|" + 
    .id
' | while IFS='|' read -r title duration views uploader id; do
    # Format duration
    duration=$(echo "$duration" | tr -d ' ')
    if [ "$duration" = "0" ] || [ -z "$duration" ]; then
        dur_formatted="N/A"
    else
        hours=$((duration / 3600))
        minutes=$(((duration % 3600) / 60))
        if [ $hours -gt 0 ]; then
            dur_formatted="${hours}h$(printf '%02d' $minutes)m"
        else
            dur_formatted="${minutes}min"
        fi
    fi
    
    # Format views
    views_num=$(echo "$views" | tr -d ' ')
    # Check if views_num is a valid number before comparison
    if [[ "$views_num" =~ ^[0-9]+$ ]]; then
        if [ "$views_num" -gt 1000000 ] 2>/dev/null; then
            views_formatted="$(awk "BEGIN {printf \"%.1f\", $views_num/1000000}")M"
        elif [ "$views_num" -gt 1000 ] 2>/dev/null; then
            views_formatted="$((views_num / 1000))K"
        else
            views_formatted="$views_num"
        fi
    else
        # If not a number, display as is or "N/A"
        views_formatted="${views_num:-N/A}"
    fi
    
    # Clean ID and create full link
    id_clean=$(echo "$id" | tr -d ' ')
    video_link="https://youtu.be/$id_clean"
    
    # Format: Title | Duration | Views | Author | Link
    printf "%-60s | %7s | %6s | %-25s | %s\n" \
        "$(echo "$title" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$dur_formatted" \
        "$views_formatted" \
        "$(echo "$uploader" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$video_link"
done)

# Header for fzf
HEADER="Title                                                        | Duration | Views  | Author                    | Link (Cmd+Click)"

# Interactive selection with fzf (multi-selection with Tab)
SELECTED=$(echo "$FORMATTED" | fzf \
    --multi \
    --prompt="üéµ Select ‚ñ∂ " \
    --height=100% \
    --layout=reverse \
    --info=inline \
    --border=rounded \
    --header="$HEADER" \
    --header-lines=0 \
    --preview-window=up:3:wrap \
    --preview='echo "üì∫ Selected: {1}"' \
    --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
    --color='header:italic:underline')

if [ -z "$SELECTED" ]; then
    echo "‚ùå No selection"
    exit 0
fi

# Count selections
NUM_SELECTED=$(echo "$SELECTED" | wc -l | tr -d ' ')

# Extract URLs
VIDEO_URLS=()
while IFS= read -r line; do
    # Extract ID from link (format: üîó VIDEO_ID)
    VIDEO_ID=$(echo "$line" | awk -F'|' '{print $NF}' | grep -oE '[a-zA-Z0-9_-]{11}' | head -1)
    if [ -n "$VIDEO_ID" ]; then
        VIDEO_URLS+=("https://www.youtube.com/watch?v=${VIDEO_ID}")
    fi
done <<< "$SELECTED"

echo ""
if [ "$NUM_SELECTED" -eq 1 ]; then
    VIDEO_TITLE=$(echo "$SELECTED" | awk -F' \\| ' '{print $1}')
    echo "‚ñ∂Ô∏è  Playing: $VIDEO_TITLE"
else
    echo "‚ñ∂Ô∏è  Playing $NUM_SELECTED videos (playlist)"
    echo "   Use < and > in mpv to navigate"
fi
echo ""

# Ask for audio or video
echo "Playback mode:"
echo "  [1] Audio only (default)"
echo "  [2] Video"
echo -n "Choice (1/2): "
read -t 5 MODE || MODE="1"
echo ""

# Display keyboard shortcuts
echo "‚å®Ô∏è  mpv shortcuts:"
echo "   <  >     : Previous/Next video"
echo "   ‚Üê  ‚Üí     : Seek -/+ 5s"
echo "   ‚Üë  ‚Üì     : Volume +/-"
echo "   Space    : Pause/Play"
echo "   q        : Quit"
echo ""

case $MODE in
    2)
        echo "üìπ Playing video..."
        echo ""
        # mpv options with playlist counter
        mpv --term-status-msg='Playlist: [${playlist-pos-1}/${playlist-count}] ‚è± ${time-pos}/${duration} | ${media-title}' \
            --term-playing-msg='‚ñ∂Ô∏è  Playing [${playlist-pos-1}/${playlist-count}]: ${media-title}' \
            "${VIDEO_URLS[@]}"
        ;;
    *)
        echo "üéß Playing audio..."
        echo ""
        # mpv audio options with playlist counter
        mpv --no-video \
            --term-status-msg='‚ô™ Playlist: [${playlist-pos-1}/${playlist-count}] | ‚è± ${time-pos}/${duration} | ${media-title}' \
            --term-playing-msg='‚ñ∂Ô∏è  Audio [${playlist-pos-1}/${playlist-count}]: ${media-title}' \
            "${VIDEO_URLS[@]}"
        ;;
esac
