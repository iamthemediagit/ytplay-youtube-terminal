#!/bin/bash
# ytplay - Interactive YouTube search with fzf selection + mpv playback
# Version: 2.2 - Terminal Guru Edition
# Usage: ytplay "search query" [max_results]

set -e

QUERY="${1:-documentary}"
MAX_RESULTS="${2:-20}"

# ═════════════════════════════════════════════════════════════════════
# Terminal Guru Design - Color Definitions
# ═════════════════════════════════════════════════════════════════════

SUCCESS='\033[1;32m'   # Bright Green
ERROR='\033[1;31m'     # Bright Red
INFO='\033[1;36m'      # Bright Cyan
NOTICE='\033[1;35m'    # Bright Magenta
DIM='\033[0;90m'       # Gray
BOLD='\033[1;37m'      # White
NC='\033[0m'           # Reset

# Check dependencies
for cmd in yt-dlp fzf jq mpv; do
    if ! command -v $cmd &> /dev/null; then
        echo -e "${ERROR}[✗]${NC} Error: $cmd is not installed"
        exit 1
    fi
done

# ASCII Logo with colors
echo -e "${INFO}┌─────────────────────────────────────────┐${NC}"
echo -e "${INFO}│${NC}  ${BOLD}▀▄    ▄  ▀▀█▀▀  █▀▀▄  █     █▀▀█  ▀▄    ▄${NC} ${INFO}│${NC}"
echo -e "${INFO}│${NC}  ${BOLD} █  █     █    █▄▄█  █     █▄▄█   █  █${NC}  ${INFO}│${NC}"
echo -e "${INFO}│${NC}  ${BOLD}  ▀▀      ▀    ▀     ▀▀▀   ▀  ▀    ▀▀${NC}   ${INFO}│${NC}"
echo -e "${INFO}│${NC}  ${SUCCESS}YouTube Terminal Player v2.2${NC}           ${INFO}│${NC}"
echo -e "${INFO}└─────────────────────────────────────────┘${NC}"
echo ""
echo -e "${ERROR}[♥]${NC} Search: ${BOLD}\"$QUERY\"${NC} ${DIM}($MAX_RESULTS results)${NC}"
echo ""

# Extract YouTube results as JSON (fast mode) - suppress shell-init errors
RESULTS=$(yt-dlp --dump-json --flat-playlist --skip-download "ytsearch${MAX_RESULTS}:${QUERY}" 2>/dev/null)

if [ -z "$RESULTS" ]; then
    echo -e "${ERROR}[✗]${NC} No results found"
    exit 1
fi

# Format for fzf: "Title | Duration | Views | Author | ID"
FORMATTED=$(echo "$RESULTS" | jq -r '
    .title[0:60] + "|" + 
    (if .duration then (.duration | tostring) else "0" end) + "|" + 
    (if .view_count then (.view_count | tostring) else "0" end) + "|" + 
    (.uploader // "Unknown")[0:25] + "|" + 
    .id
' | while IFS='|' read -r title duration views uploader id; do
    # Format duration
    duration=$(echo "$duration" | tr -d ' ')
    # Validate duration is numeric
    if [ "$duration" = "0" ] || [ -z "$duration" ] || ! [[ "$duration" =~ ^[0-9]+$ ]]; then
        dur_formatted="N/A"
    else
        hours=$((duration / 3600))
        minutes=$(((duration % 3600) / 60))
        if [ $hours -gt 0 ]; then
            dur_formatted="${hours}h$(printf '%02d' $minutes)m"
        else
            dur_formatted="${minutes}min"
        fi
    fi
    
    # Format views
    views_num=$(echo "$views" | tr -d ' ')
    # Check if views_num is a valid number before comparison
    if [[ "$views_num" =~ ^[0-9]+$ ]]; then
        if [ "$views_num" -gt 1000000 ] 2>/dev/null; then
            views_formatted="$(awk "BEGIN {printf \"%.1f\", $views_num/1000000}")M"
        elif [ "$views_num" -gt 1000 ] 2>/dev/null; then
            views_formatted="$((views_num / 1000))K"
        else
            views_formatted="$views_num"
        fi
    else
        # If not a number, display as is or "N/A"
        views_formatted="${views_num:-N/A}"
    fi
    
    # Clean ID and create full link
    id_clean=$(echo "$id" | tr -d ' ')
    video_link="https://youtu.be/$id_clean"
    
    # Format: Title | Duration | Views | Author | Link
    printf "%-60s | %7s | %6s | %-25s | %s\n" \
        "$(echo "$title" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$dur_formatted" \
        "$views_formatted" \
        "$(echo "$uploader" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" \
        "$video_link"
done)

# Header for fzf
HEADER="Title                                                        | Duration | Views  | Author                    | Link (Cmd+Click)"

# Interactive selection with fzf (multi-selection with Tab)
SELECTED=$(echo "$FORMATTED" | fzf \
    --multi \
    --prompt="♫ Select videos (Tab=multi, Enter=play) ▶ " \
    --height=100% \
    --layout=reverse \
    --info=inline \
    --border=rounded \
    --header="$HEADER | Use Tab to select multiple · Enter to play · Ctrl-A for all" \
    --header-lines=0 \
    --preview-window=up:3:wrap \
    --preview='echo "📺 Selected: {1}"' \
    --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
    --color='fg:#ffffff,bg:#000000,hl:#ff79c6,fg+:#ffffff,bg+:#2d2d2d,hl+:#ff79c6,info:#bd93f9,prompt:#50fa7b,pointer:#ff79c6,marker:#ff79c6,spinner:#bd93f9,header:#8be9fd:italic:underline')

if [ -z "$SELECTED" ]; then
    echo -e "${DIM}[#]${NC} No selection made"
    exit 0
fi

# Count selections
NUM_SELECTED=$(echo "$SELECTED" | wc -l | tr -d ' ')

# Extract URLs
VIDEO_URLS=()
while IFS= read -r line; do
    # Extract ID from link (format: 🔗 VIDEO_ID)
    VIDEO_ID=$(echo "$line" | awk -F'|' '{print $NF}' | grep -oE '[a-zA-Z0-9_-]{11}' | head -1)
    if [ -n "$VIDEO_ID" ]; then
        VIDEO_URLS+=("https://www.youtube.com/watch?v=${VIDEO_ID}")
    fi
done <<< "$SELECTED"

echo ""
if [ "$NUM_SELECTED" -eq 1 ]; then
    VIDEO_TITLE=$(echo "$SELECTED" | awk -F' \\| ' '{print $1}')
    echo -e "${SUCCESS}[⏵]${NC} Playing: ${BOLD}$VIDEO_TITLE${NC}"
else
    echo -e "${SUCCESS}[⏵]${NC} Playing ${BOLD}$NUM_SELECTED${NC} videos ${DIM}(playlist)${NC}"
fi
echo ""

# Ask for audio or video
echo -e "${INFO}[⚑]${NC} Playback mode:"
echo -e "  ${BOLD}[1]${NC} Audio only ${DIM}(default)${NC}"
echo -e "  ${BOLD}[2]${NC} Video"
echo -ne "${NOTICE}Choice (1/2):${NC} "
read -t 5 MODE || MODE="1"
echo ""

# Display keyboard shortcuts
echo -e "${DIM}─────────────────────────────────────────${NC}"
echo -e "${NOTICE}[♫]${NC} mpv shortcuts:"
echo -e "${DIM}   <  >     : Previous/Next video${NC}"
echo -e "${DIM}   ←  →     : Seek -/+ 5s${NC}"
echo -e "${DIM}   ↑  ↓     : Volume +/-${NC}"
echo -e "${DIM}   Space    : Pause/Play${NC}"
echo -e "${DIM}   q        : Quit${NC}"
echo -e "${DIM}─────────────────────────────────────────${NC}"
echo ""

case $MODE in
    2)
        echo -e "${NOTICE}[♫]${NC} Playing video..."
        echo ""
        # mpv video - force terminal OSD display with clean output
        mpv --term-osd=force \
            --term-osd-bar \
            --term-status-msg='♪ [${playlist-pos-1}/${playlist-count}] | ⏱ ${time-pos}/${duration}' \
            --term-playing-msg='⏵ Video: ${media-title}' \
            --msg-level=cplayer=error,ffmpeg=error,file=error \
            "${VIDEO_URLS[@]}"
        ;;
    *)
        echo -e "${NOTICE}[♫]${NC} Playing audio..."
        echo ""
        # mpv audio - force terminal OSD display with clean output
        mpv --no-video \
            --term-osd=force \
            --term-osd-bar \
            --term-status-msg='♪ [${playlist-pos-1}/${playlist-count}] | ⏱ ${time-pos}/${duration}' \
            --term-playing-msg='⏵ Audio: ${media-title}' \
            --msg-level=cplayer=error,ffmpeg=error,file=error \
            "${VIDEO_URLS[@]}"
        ;;
esac
